{"ast":null,"code":"import _objectSpread from \"/Users/jdh/Workgrouper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jdh/Workgrouper/src/components/rxWorkgroupLabel.js\";\nimport React from \"react\";\nimport { ordinals } from \"../data\";\nimport { diff } from \"deep-object-diff\";\n\nvar getIntervalSymbol = function getIntervalSymbol(interval, intervalType) {\n  switch (intervalType) {\n    case \"inclusive\":\n      return \" //\".concat(interval);\n\n    case \"exclusive\":\n      return \" /\".concat(interval);\n\n    case \"none\":\n      return \"\";\n\n    default:\n      return \"\".concat(interval);\n  }\n};\n\nvar getOrdinalSymbol = function getOrdinalSymbol(sortOrder) {\n  return ordinals[sortOrder] + \".\";\n};\n\nvar groupWorksets = function groupWorksets(worksets) {\n  var groupedWorksets = [];\n  worksets.forEach(function (thisWorkset, i, arr) {\n    var prevWorkset = arr[i - 1];\n\n    if (i === 0) {\n      groupedWorksets.push([thisWorkset]);\n    } else if (areTheseThingsEqual([thisWorkset, prevWorkset])) {\n      groupedWorksets[groupedWorksets.length - 1].push(thisWorkset);\n    } else {\n      groupedWorksets.push([thisWorkset]);\n    }\n  });\n  return groupedWorksets;\n};\n\nvar areTheseThingsEqual = function areTheseThingsEqual(things) {\n  var unorderedThings = things.map(function (thing) {\n    return _objectSpread({}, thing, {\n      sortOrder: 0\n    });\n  });\n  var thingDiffs = unorderedThings.map(function (thing, i, arr) {\n    return diff(arr[0], thing);\n  });\n  var areThingsEqual = thingDiffs.every(function (thingDiff) {\n    return Object.keys(thingDiff).length === 0 && thingDiff.constructor === Object;\n  });\n  return areThingsEqual;\n}; //#region Workset Components\n\n\nvar SingleWorksetLabelWithoutExercise = function SingleWorksetLabelWithoutExercise(_ref) {\n  var workset = _ref.workset;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"1x\", workset.reps, \" @ \", workset.intensity + workset.intensityUnit, \" \", getIntervalSymbol(workset.interval, workset.intervalType));\n};\n\nvar SingleWorksetLabelWithExercise = function SingleWorksetLabelWithExercise(_ref2) {\n  var workset = _ref2.workset;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, workset.exercise.name, \", 1x\", workset.reps, \" @\", \" \", workset.intensity + workset.intensityUnit, \" \", getIntervalSymbol(workset.interval, workset.intervalType));\n};\n\nvar MultipleWorksetsWithoutExerciseLabel = function MultipleWorksetsWithoutExerciseLabel(_ref3) {\n  var worksets = _ref3.worksets;\n  var worksetCount = worksets.length;\n  var workset = worksets[0];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, worksetCount, \"x\", workset.reps, \" @\", \" \", workset.intensity + workset.intensityUnit, \" \", getIntervalSymbol(workset.interval, workset.intervalType));\n};\n\nvar MultipleWorksetsWithExerciseLabel = function MultipleWorksetsWithExerciseLabel(_ref4) {\n  var worksets = _ref4.worksets;\n  var worksetCount = worksets.length;\n  var workset = worksets[0];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, workset.exercise.name, \", \", worksetCount, \"x\", workset.reps, \" @\", \" \", workset.intensity + workset.intensityUnit, \" \", getIntervalSymbol(workset.interval, workset.intervalType));\n}; //#endregion\n//region Round Components\n\n\nvar SingleRoundSingleModeWorkgroupLabel = function SingleRoundSingleModeWorkgroupLabel(_ref5) {\n  var round = _ref5.round;\n  var worksets = round.worksets;\n  var worksetsAreEqual = areTheseThingsEqual(worksets);\n\n  if (worksetsAreEqual) {\n    return React.createElement(MultipleWorksetsWithExerciseLabel, {\n      worksets: worksets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    });\n  } else {\n    var exerciseName = worksets[0].exercise.name;\n    var groupedWorksets = groupWorksets(worksets);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, exerciseName + \", \", groupedWorksets.map(function (worksetGroup) {\n      if (worksetGroup.length === 1) {\n        return React.createElement(SingleWorksetLabelWithoutExercise, {\n          workset: worksetGroup[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n          worksets: worksetGroup,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n      }\n    }));\n  }\n};\n\nvar MultipleRoundsSingleModeWorkgroupLabel = function MultipleRoundsSingleModeWorkgroupLabel(_ref6) {\n  var workgroup = _ref6.workgroup;\n  var rounds = workgroup.rounds,\n      interval = workgroup.interval,\n      intervalType = workgroup.intervalType;\n  var roundCount = rounds.length;\n  var round = rounds[0];\n  var worksets = round.worksets;\n  var exercise = worksets[0].exercise;\n  var worksetsAreEqual = areTheseThingsEqual(worksets);\n\n  if (worksetsAreEqual) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, exercise.name + \", \", roundCount + \" rounds\", getIntervalSymbol(interval, intervalType), React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n      worksets: worksets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  } else {\n    var groupedWorksets = groupWorksets(worksets);\n\n    if (worksets.length === 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, exercise.name + \", \", roundCount + \" rounds\", getIntervalSymbol(interval, intervalType), worksets.map(function (workset) {\n        return React.createElement(SingleWorksetLabelWithoutExercise, {\n          workset: workset,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        });\n      }));\n    } else {\n      if (worksets.map(function (ws) {\n        return ws.exercise.name;\n      }).filter(function (v, i, a) {\n        return a.indexOf(v) === i;\n      }).length === 1) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, exercise.name + \", \", roundCount + \" rounds\", getIntervalSymbol(interval, intervalType), groupedWorksets.map(function (worksetGroup) {\n          if (worksetGroup.length === 1) {\n            return worksetGroup.map(function (workset) {\n              return React.createElement(SingleWorksetLabelWithoutExercise, {\n                workset: workset,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 166\n                },\n                __self: this\n              });\n            });\n          } else {\n            return React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n              worksets: worksetGroup,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171\n              },\n              __self: this\n            });\n          }\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, roundCount + \" rounds\", getIntervalSymbol(interval, intervalType), groupedWorksets.map(function (worksetGroup) {\n          if (worksetGroup.length === 1) {\n            return worksetGroup.map(function (workset) {\n              return React.createElement(SingleWorksetLabelWithExercise, {\n                workset: workset,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 187\n                },\n                __self: this\n              });\n            });\n          } else {\n            return React.createElement(MultipleWorksetsWithExerciseLabel, {\n              worksets: worksetGroup,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 191\n              },\n              __self: this\n            });\n          }\n        }));\n      }\n    }\n  }\n};\n\nvar MultipleRoundsMultiModeWorkgroupLabel = function MultipleRoundsMultiModeWorkgroupLabel(_ref7) {\n  var workgroup = _ref7.workgroup;\n  var rounds = workgroup.rounds;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, rounds.map(function (round, roundIndex) {\n    var groupedWorksets = groupWorksets(round.worksets);\n    groupedWorksets.map(function (worksetGroup) {\n      if (worksetGroup.length === 1) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, \"Round \".concat(roundIndex + 1), React.createElement(SingleWorksetLabelWithExercise, {\n          workset: worksetGroup[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, \"Round \".concat(roundIndex + 1), React.createElement(MultipleWorksetsWithExerciseLabel, {\n          worksets: worksetGroup,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }));\n      }\n    });\n  }));\n}; //#endregion\n\n\nexport var RxWorkgroupLabel = function RxWorkgroupLabel(_ref8) {\n  var workgroup = _ref8.workgroup;\n  var rounds = workgroup.rounds,\n      note = workgroup.note;\n  var roundsCount = rounds.length;\n  var roundsAreEqual = areTheseThingsEqual(rounds);\n  var ordinalSymbol = getOrdinalSymbol(workgroup.sortOrder);\n\n  if (roundsCount === 1) {\n    return React.createElement(\"div\", {\n      className: \"mb-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, note ? React.createElement(\"div\", {\n      className: \"text-sm mt-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, note) : null, React.createElement(\"div\", {\n      className: \"mr-1 flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, ordinalSymbol, React.createElement(SingleRoundSingleModeWorkgroupLabel, {\n      round: rounds[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })));\n  } else {\n    if (roundsAreEqual) {\n      return React.createElement(\"div\", {\n        className: \"mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, note ? React.createElement(\"div\", {\n        className: \"text-sm mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, note) : null, React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, ordinalSymbol), React.createElement(MultipleRoundsSingleModeWorkgroupLabel, {\n        workgroup: workgroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, note ? React.createElement(\"div\", {\n        className: \"text-sm mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, note) : null, React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, ordinalSymbol), React.createElement(MultipleRoundsMultiModeWorkgroupLabel, {\n        workgroup: workgroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      })));\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jdh/Workgrouper/src/components/rxWorkgroupLabel.js"],"names":["React","ordinals","diff","getIntervalSymbol","interval","intervalType","getOrdinalSymbol","sortOrder","groupWorksets","worksets","groupedWorksets","forEach","thisWorkset","i","arr","prevWorkset","push","areTheseThingsEqual","length","things","unorderedThings","map","thing","thingDiffs","areThingsEqual","every","thingDiff","Object","keys","constructor","SingleWorksetLabelWithoutExercise","workset","reps","intensity","intensityUnit","SingleWorksetLabelWithExercise","exercise","name","MultipleWorksetsWithoutExerciseLabel","worksetCount","MultipleWorksetsWithExerciseLabel","SingleRoundSingleModeWorkgroupLabel","round","worksetsAreEqual","exerciseName","worksetGroup","MultipleRoundsSingleModeWorkgroupLabel","workgroup","rounds","roundCount","ws","filter","v","a","indexOf","MultipleRoundsMultiModeWorkgroupLabel","roundIndex","RxWorkgroupLabel","note","roundsCount","roundsAreEqual","ordinalSymbol"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ordinals } from \"../data\";\nimport { diff } from \"deep-object-diff\";\n\nconst getIntervalSymbol = (interval, intervalType) => {\n  switch (intervalType) {\n    case \"inclusive\":\n      return ` //${interval}`;\n    case \"exclusive\":\n      return ` /${interval}`;\n    case \"none\":\n      return \"\";\n    default:\n      return `${interval}`;\n  }\n};\n\nconst getOrdinalSymbol = sortOrder => {\n  return ordinals[sortOrder] + \".\";\n};\n\nconst groupWorksets = worksets => {\n  let groupedWorksets = [];\n  worksets.forEach((thisWorkset, i, arr) => {\n    const prevWorkset = arr[i - 1];\n    if (i === 0) {\n      groupedWorksets.push([thisWorkset]);\n    } else if (areTheseThingsEqual([thisWorkset, prevWorkset])) {\n      groupedWorksets[groupedWorksets.length - 1].push(thisWorkset);\n    } else {\n      groupedWorksets.push([thisWorkset]);\n    }\n  });\n  return groupedWorksets;\n};\n\nconst areTheseThingsEqual = things => {\n  const unorderedThings = things.map(thing => ({ ...thing, sortOrder: 0 }));\n  const thingDiffs = unorderedThings.map((thing, i, arr) =>\n    diff(arr[0], thing)\n  );\n  const areThingsEqual = thingDiffs.every(\n    thingDiff =>\n      Object.keys(thingDiff).length === 0 && thingDiff.constructor === Object\n  );\n  return areThingsEqual;\n};\n\n//#region Workset Components\nconst SingleWorksetLabelWithoutExercise = ({ workset }) => {\n  return (\n    <div>\n      1x{workset.reps} @ {workset.intensity + workset.intensityUnit}{\" \"}\n      {getIntervalSymbol(workset.interval, workset.intervalType)}\n    </div>\n  );\n};\n\nconst SingleWorksetLabelWithExercise = ({ workset }) => {\n  return (\n    <div>\n      {workset.exercise.name}, 1x{workset.reps} @{\" \"}\n      {workset.intensity + workset.intensityUnit}{\" \"}\n      {getIntervalSymbol(workset.interval, workset.intervalType)}\n    </div>\n  );\n};\n\nconst MultipleWorksetsWithoutExerciseLabel = ({ worksets }) => {\n  const worksetCount = worksets.length;\n  const workset = worksets[0];\n  return (\n    <div>\n      {worksetCount}x{workset.reps} @{\" \"}\n      {workset.intensity + workset.intensityUnit}{\" \"}\n      {getIntervalSymbol(workset.interval, workset.intervalType)}\n    </div>\n  );\n};\n\nconst MultipleWorksetsWithExerciseLabel = ({ worksets }) => {\n  const worksetCount = worksets.length;\n  const workset = worksets[0];\n  return (\n    <div>\n      {workset.exercise.name}, {worksetCount}x{workset.reps} @{\" \"}\n      {workset.intensity + workset.intensityUnit}{\" \"}\n      {getIntervalSymbol(workset.interval, workset.intervalType)}\n    </div>\n  );\n};\n//#endregion\n\n//region Round Components\nconst SingleRoundSingleModeWorkgroupLabel = ({ round }) => {\n  const worksets = round.worksets;\n  const worksetsAreEqual = areTheseThingsEqual(worksets);\n  if (worksetsAreEqual) {\n    return <MultipleWorksetsWithExerciseLabel worksets={worksets} />;\n  } else {\n    const exerciseName = worksets[0].exercise.name;\n    const groupedWorksets = groupWorksets(worksets);\n    return (\n      <div>\n        {exerciseName + \", \"}\n        {groupedWorksets.map(worksetGroup => {\n          if (worksetGroup.length === 1) {\n            return (\n              <SingleWorksetLabelWithoutExercise workset={worksetGroup[0]} />\n            );\n          } else {\n            return (\n              <MultipleWorksetsWithoutExerciseLabel worksets={worksetGroup} />\n            );\n          }\n        })}\n      </div>\n    );\n  }\n};\n\nconst MultipleRoundsSingleModeWorkgroupLabel = ({ workgroup }) => {\n  const { rounds, interval, intervalType } = workgroup;\n  const roundCount = rounds.length;\n  const round = rounds[0];\n  const worksets = round.worksets;\n  const { exercise } = worksets[0];\n  const worksetsAreEqual = areTheseThingsEqual(worksets);\n  if (worksetsAreEqual) {\n    return (\n      <div>\n        {exercise.name + \", \"}\n        {roundCount + \" rounds\"}\n        {getIntervalSymbol(interval, intervalType)}\n        <MultipleWorksetsWithoutExerciseLabel worksets={worksets} />\n      </div>\n    );\n  } else {\n    const groupedWorksets = groupWorksets(worksets);\n    if (worksets.length === 1) {\n      return (\n        <div>\n          {exercise.name + \", \"}\n          {roundCount + \" rounds\"}\n          {getIntervalSymbol(interval, intervalType)}\n          {worksets.map(workset => {\n            return <SingleWorksetLabelWithoutExercise workset={workset} />;\n          })}\n        </div>\n      );\n    } else {\n      if (\n        worksets\n          .map(ws => ws.exercise.name)\n          .filter((v, i, a) => a.indexOf(v) === i).length === 1\n      ) {\n        return (\n          <div>\n            {exercise.name + \", \"}\n            {roundCount + \" rounds\"}\n            {getIntervalSymbol(interval, intervalType)}\n            {groupedWorksets.map(worksetGroup => {\n              if (worksetGroup.length === 1) {\n                return worksetGroup.map(workset => {\n                  return (\n                    <SingleWorksetLabelWithoutExercise workset={workset} />\n                  );\n                });\n              } else {\n                return (\n                  <MultipleWorksetsWithoutExerciseLabel\n                    worksets={worksetGroup}\n                  />\n                );\n              }\n            })}\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            {roundCount + \" rounds\"}\n            {getIntervalSymbol(interval, intervalType)}\n            {groupedWorksets.map(worksetGroup => {\n              if (worksetGroup.length === 1) {\n                return worksetGroup.map(workset => {\n                  return <SingleWorksetLabelWithExercise workset={workset} />;\n                });\n              } else {\n                return (\n                  <MultipleWorksetsWithExerciseLabel worksets={worksetGroup} />\n                );\n              }\n            })}\n          </div>\n        );\n      }\n    }\n  }\n};\n\nconst MultipleRoundsMultiModeWorkgroupLabel = ({ workgroup }) => {\n  const { rounds } = workgroup;\n\n  return (\n    <div>\n      {rounds.map((round, roundIndex) => {\n        const groupedWorksets = groupWorksets(round.worksets);\n        groupedWorksets.map(worksetGroup => {\n          if (worksetGroup.length === 1) {\n            return (\n              <div>\n                {`Round ${roundIndex + 1}`}\n                <SingleWorksetLabelWithExercise workset={worksetGroup[0]} />\n              </div>\n            );\n          } else {\n            return (\n              <div>\n                {`Round ${roundIndex + 1}`}\n                <MultipleWorksetsWithExerciseLabel worksets={worksetGroup} />\n              </div>\n            );\n          }\n        });\n      })}\n    </div>\n  );\n};\n//#endregion\n\nexport const RxWorkgroupLabel = ({ workgroup }) => {\n  const { rounds, note } = workgroup;\n  const roundsCount = rounds.length;\n  const roundsAreEqual = areTheseThingsEqual(rounds);\n  const ordinalSymbol = getOrdinalSymbol(workgroup.sortOrder);\n  if (roundsCount === 1) {\n    return (\n      <div className=\"mb-2\">\n        {note ? <div className=\"text-sm mt-1\">{note}</div> : null}\n        <div className=\"mr-1 flex\">\n          {ordinalSymbol}\n          <SingleRoundSingleModeWorkgroupLabel round={rounds[0]} />\n        </div>\n      </div>\n    );\n  } else {\n    if (roundsAreEqual) {\n      return (\n        <div className=\"mb-2\">\n          {note ? <div className=\"text-sm mt-1\">{note}</div> : null}\n          <div className=\"flex\">\n            <div className=\"mr-1\">{ordinalSymbol}</div>\n            <MultipleRoundsSingleModeWorkgroupLabel workgroup={workgroup} />\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"mb-2\">\n          {note ? <div className=\"text-sm mt-1\">{note}</div> : null}\n          <div className=\"flex\">\n            <div className=\"mr-1\">{ordinalSymbol}</div>\n            <MultipleRoundsMultiModeWorkgroupLabel workgroup={workgroup} />\n          </div>\n        </div>\n      );\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
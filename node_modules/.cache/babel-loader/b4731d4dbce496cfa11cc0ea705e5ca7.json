{"ast":null,"code":"var _jsxFileName = \"/Users/jdh/Workgrouper/src/components/roundLabels.js\";\nimport React from \"react\";\nimport { SingleWorksetLabelWithExercise, MultipleWorksetsWithoutExerciseLabel, MultipleWorksetsWithExerciseLabel } from \".\";\n\nvar groupWorksets = function groupWorksets(worksets) {\n  var groupedWorksets = [];\n  worksets.forEach(function (thisWorkset, i, arr) {\n    var prevWorkset = arr[i - 1];\n\n    if (i === 0) {\n      groupedWorksets.push([thisWorkset]);\n    } else if (areTheseThingsEqual([thisWorkset, prevWorkset])) {\n      groupedWorksets[groupedWorksets.length - 1].push(thisWorkset);\n    } else {\n      groupedWorksets.push([thisWorkset]);\n    }\n  });\n  return groupedWorksets;\n};\n\nexport var SingleRoundSingleModeWorkgroupLabel = function SingleRoundSingleModeWorkgroupLabel(_ref) {\n  var round = _ref.round;\n  var worksets = round.worksets;\n  var worksetsAreEqual = areTheseThingsEqual(worksets);\n\n  if (worksetsAreEqual) {\n    return React.createElement(MultipleWorksetsWithExerciseLabel, {\n      worksets: worksets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n  } else {\n    var exerciseName = worksets[0].exercise.name;\n    var groupedWorksets = groupWorksets(worksets);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, exerciseName + \", \", groupedWorksets.map(function (worksetGroup) {\n      return React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n        worksets: worksetGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      });\n    }));\n  }\n};\nexport var MultipleRoundsSingleModeWorkgroupLabel = function MultipleRoundsSingleModeWorkgroupLabel(_ref2) {\n  var workgroup = _ref2.workgroup;\n  var rounds = workgroup.rounds;\n  var roundCount = rounds.length;\n  var round = rounds[0];\n  var worksets = round.worksets;\n  var exercise = worksets[0].exercise;\n  var groupedWorksets = groupWorksets(worksets);\n  var isMultiModal = worksets.map(function (ws) {\n    return ws.exercise.name;\n  }).filter(function (v, i, a) {\n    return a.indexOf(v) === i;\n  }).length !== 1;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, !isMultiModal ? exercise.name + \", \" : null, roundCount + \" rounds\", groupedWorksets.map(function (worksetGroup) {\n    return isMultiModal ? React.createElement(MultipleWorksetsWithExerciseLabel, {\n      worksets: worksetGroup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }) : React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n      worksets: worksetGroup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  }));\n};\nexport var MultipleRoundsMultiModeWorkgroupLabel = function MultipleRoundsMultiModeWorkgroupLabel(_ref3) {\n  var workgroup = _ref3.workgroup;\n  var rounds = workgroup.rounds;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, rounds.map(function (round, roundIndex) {\n    var groupedWorksets = groupWorksets(round.worksets);\n    var intervalSymbol = getIntervalSymbol(round.interval, round.intervalType);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Round \".concat(roundIndex + 1), intervalSymbol, groupedWorksets.map(function (worksetGroup) {\n      return worksetGroup.length === 1 ? React.createElement(SingleWorksetLabelWithExercise, {\n        workset: worksetGroup[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }) : React.createElement(MultipleWorksetsWithExerciseLabel, {\n        worksets: worksetGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }));\n  }));\n};","map":{"version":3,"sources":["/Users/jdh/Workgrouper/src/components/roundLabels.js"],"names":["React","SingleWorksetLabelWithExercise","MultipleWorksetsWithoutExerciseLabel","MultipleWorksetsWithExerciseLabel","groupWorksets","worksets","groupedWorksets","forEach","thisWorkset","i","arr","prevWorkset","push","areTheseThingsEqual","length","SingleRoundSingleModeWorkgroupLabel","round","worksetsAreEqual","exerciseName","exercise","name","map","worksetGroup","MultipleRoundsSingleModeWorkgroupLabel","workgroup","rounds","roundCount","isMultiModal","ws","filter","v","a","indexOf","MultipleRoundsMultiModeWorkgroupLabel","roundIndex","intervalSymbol","getIntervalSymbol","interval","intervalType"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  SingleWorksetLabelWithExercise,\n  MultipleWorksetsWithoutExerciseLabel,\n  MultipleWorksetsWithExerciseLabel\n} from \".\";\n\nconst groupWorksets = worksets => {\n  let groupedWorksets = [];\n  worksets.forEach((thisWorkset, i, arr) => {\n    const prevWorkset = arr[i - 1];\n    if (i === 0) {\n      groupedWorksets.push([thisWorkset]);\n    } else if (areTheseThingsEqual([thisWorkset, prevWorkset])) {\n      groupedWorksets[groupedWorksets.length - 1].push(thisWorkset);\n    } else {\n      groupedWorksets.push([thisWorkset]);\n    }\n  });\n  return groupedWorksets;\n};\n\nexport const SingleRoundSingleModeWorkgroupLabel = ({ round }) => {\n  const worksets = round.worksets;\n  const worksetsAreEqual = areTheseThingsEqual(worksets);\n  if (worksetsAreEqual) {\n    return <MultipleWorksetsWithExerciseLabel worksets={worksets} />;\n  } else {\n    const exerciseName = worksets[0].exercise.name;\n    const groupedWorksets = groupWorksets(worksets);\n    return (\n      <div>\n        {exerciseName + \", \"}\n        {groupedWorksets.map(worksetGroup => {\n          return (\n            <MultipleWorksetsWithoutExerciseLabel worksets={worksetGroup} />\n          );\n        })}\n      </div>\n    );\n  }\n};\n\nexport const MultipleRoundsSingleModeWorkgroupLabel = ({ workgroup }) => {\n  const { rounds } = workgroup;\n  const roundCount = rounds.length;\n  const round = rounds[0];\n  const worksets = round.worksets;\n  const { exercise } = worksets[0];\n  const groupedWorksets = groupWorksets(worksets);\n  const isMultiModal =\n    worksets.map(ws => ws.exercise.name).filter((v, i, a) => a.indexOf(v) === i)\n      .length !== 1;\n\n  return (\n    <div>\n      {!isMultiModal ? exercise.name + \", \" : null}\n      {roundCount + \" rounds\"}\n      {groupedWorksets.map(worksetGroup =>\n        isMultiModal ? (\n          <MultipleWorksetsWithExerciseLabel worksets={worksetGroup} />\n        ) : (\n          <MultipleWorksetsWithoutExerciseLabel worksets={worksetGroup} />\n        )\n      )}\n    </div>\n  );\n};\n\nexport const MultipleRoundsMultiModeWorkgroupLabel = ({ workgroup }) => {\n  const { rounds } = workgroup;\n  return (\n    <div>\n      {rounds.map((round, roundIndex) => {\n        const groupedWorksets = groupWorksets(round.worksets);\n        const intervalSymbol = getIntervalSymbol(\n          round.interval,\n          round.intervalType\n        );\n        return (\n          <div>\n            {`Round ${roundIndex + 1}`}\n            {intervalSymbol}\n            {groupedWorksets.map(worksetGroup =>\n              worksetGroup.length === 1 ? (\n                <SingleWorksetLabelWithExercise workset={worksetGroup[0]} />\n              ) : (\n                <MultipleWorksetsWithExerciseLabel worksets={worksetGroup} />\n              )\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
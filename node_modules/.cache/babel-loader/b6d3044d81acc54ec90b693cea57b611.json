{"ast":null,"code":"import _objectSpread from \"/Users/jdh/Workgrouper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/jdh/Workgrouper/src/components/rxWorkgroupLabel.js\";\nimport React from \"react\";\nimport { ordinals } from \"../data\";\nimport { diff } from \"deep-object-diff\";\n\nvar getIntervalSymbol = function getIntervalSymbol(interval, intervalType) {\n  switch (intervalType) {\n    case \"inclusive\":\n      return \" //\".concat(interval);\n\n    case \"exclusive\":\n      return \" /\".concat(interval);\n\n    case \"none\":\n      return \"\";\n\n    default:\n      return \"\".concat(interval);\n  }\n};\n\nvar getOrdinalSymbol = function getOrdinalSymbol(sortOrder) {\n  return ordinals[sortOrder] + \".\";\n};\n\nvar groupWorksets = function groupWorksets(worksets) {\n  var groupedWorksets = [];\n  worksets.forEach(function (thisWorkset, i, arr) {\n    var prevWorkset = arr[i - 1];\n\n    if (i === 0) {\n      groupedWorksets.push([thisWorkset]);\n    } else if (areTheseThingsEqual([thisWorkset, prevWorkset])) {\n      groupedWorksets[groupedWorksets.length - 1].push(thisWorkset);\n    } else {\n      groupedWorksets.push([thisWorkset]);\n    }\n  });\n  return groupedWorksets;\n};\n\nvar areTheseThingsEqual = function areTheseThingsEqual(things) {\n  var unorderedThings = things.map(function (thing) {\n    return _objectSpread({}, thing, {\n      sortOrder: 0\n    });\n  });\n  var thingDiffs = unorderedThings.map(function (thing, i, arr) {\n    return diff(arr[0], thing);\n  });\n  var areThingsEqual = thingDiffs.every(function (thingDiff) {\n    return Object.keys(thingDiff).length === 0 && thingDiff.constructor === Object;\n  });\n  return areThingsEqual;\n}; //#region Workset Components\n\n\nvar SingleWorksetLabelWithExercise = function SingleWorksetLabelWithExercise(_ref) {\n  var workset = _ref.workset;\n  var exercise = workset.exercise,\n      reps = workset.reps,\n      intensity = workset.intensity,\n      intensityUnit = workset.intensityUnit,\n      interval = workset.interval,\n      intervalType = workset.intervalType;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, exercise.name, \", 1x\", reps, \" @ \", intensity + intensityUnit, \" \", getIntervalSymbol(interval, intervalType));\n};\n\nvar MultipleWorksetsWithoutExerciseLabel = function MultipleWorksetsWithoutExerciseLabel(_ref2) {\n  var worksets = _ref2.worksets;\n  var worksetCount = worksets.length;\n  var workset = worksets[0];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, worksetCount, \"x\", workset.reps, \" @\", \" \", workset.intensity + workset.intensityUnit, \" \", getIntervalSymbol(workset.interval, workset.intervalType));\n};\n\nvar MultipleWorksetsWithExerciseLabel = function MultipleWorksetsWithExerciseLabel(_ref3) {\n  var worksets = _ref3.worksets;\n  var worksetCount = worksets.length;\n  var workset = worksets[0];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, workset.exercise.name, \", \", worksetCount, \"x\", workset.reps, \" @\", \" \", workset.intensity + workset.intensityUnit, \" \", getIntervalSymbol(workset.interval, workset.intervalType));\n}; //#endregion\n//region Round Components\n\n\nvar SingleRoundSingleModeWorkgroupLabel = function SingleRoundSingleModeWorkgroupLabel(_ref4) {\n  var round = _ref4.round;\n  var worksets = round.worksets;\n  var worksetsAreEqual = areTheseThingsEqual(worksets);\n\n  if (worksetsAreEqual) {\n    return React.createElement(MultipleWorksetsWithExerciseLabel, {\n      worksets: worksets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  } else {\n    var exerciseName = worksets[0].exercise.name;\n    var groupedWorksets = groupWorksets(worksets);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, exerciseName + \", \", groupedWorksets.map(function (worksetGroup) {\n      return React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n        worksets: worksetGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    }));\n  }\n};\n\nvar MultipleRoundsSingleModeWorkgroupLabel = function MultipleRoundsSingleModeWorkgroupLabel(_ref5) {\n  var workgroup = _ref5.workgroup;\n  var rounds = workgroup.rounds;\n  var roundCount = rounds.length;\n  var round = rounds[0];\n  var worksets = round.worksets;\n  var exercise = worksets[0].exercise;\n  var groupedWorksets = groupWorksets(worksets);\n  var isMultiModal = worksets.map(function (ws) {\n    return ws.exercise.name;\n  }).filter(function (v, i, a) {\n    return a.indexOf(v) === i;\n  }).length !== 1;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, !isMultiModal ? exercise.name + \", \" : null, roundCount + \" rounds\", groupedWorksets.map(function (worksetGroup) {\n    return isMultiModal ? React.createElement(MultipleWorksetsWithExerciseLabel, {\n      worksets: worksetGroup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }) : React.createElement(MultipleWorksetsWithoutExerciseLabel, {\n      worksets: worksetGroup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    });\n  }));\n};\n\nvar MultipleRoundsMultiModeWorkgroupLabel = function MultipleRoundsMultiModeWorkgroupLabel(_ref6) {\n  var workgroup = _ref6.workgroup;\n  var rounds = workgroup.rounds;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, rounds.map(function (round, roundIndex) {\n    var groupedWorksets = groupWorksets(round.worksets);\n    var intervalSymbol = getIntervalSymbol(round.interval, round.intervalType);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Round \".concat(roundIndex + 1), intervalSymbol, groupedWorksets.map(function (worksetGroup) {\n      return worksetGroup.length === 1 ? React.createElement(SingleWorksetLabelWithExercise, {\n        workset: worksetGroup[0],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }) : React.createElement(MultipleWorksetsWithExerciseLabel, {\n        worksets: worksetGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      });\n    }));\n  }));\n}; //#endregion\n\n\nexport var RxWorkgroupLabel = function RxWorkgroupLabel(_ref7) {\n  var workgroup = _ref7.workgroup;\n  var rounds = workgroup.rounds,\n      note = workgroup.note;\n  var roundsCount = rounds.length;\n  var roundsAreEqual = areTheseThingsEqual(rounds);\n  var ordinalSymbol = getOrdinalSymbol(workgroup.sortOrder);\n  return React.createElement(\"div\", {\n    className: \"mb-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, note ? React.createElement(\"div\", {\n    className: \"text-sm mt-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, note) : null, React.createElement(\"div\", {\n    className: \"flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mr-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, ordinalSymbol), roundsCount === 1 ? React.createElement(SingleRoundSingleModeWorkgroupLabel, {\n    round: rounds[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }) : roundsAreEqual ? React.createElement(MultipleRoundsSingleModeWorkgroupLabel, {\n    workgroup: workgroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }) : React.createElement(MultipleRoundsMultiModeWorkgroupLabel, {\n    workgroup: workgroup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  })));\n};","map":{"version":3,"sources":["/Users/jdh/Workgrouper/src/components/rxWorkgroupLabel.js"],"names":["React","ordinals","diff","getIntervalSymbol","interval","intervalType","getOrdinalSymbol","sortOrder","groupWorksets","worksets","groupedWorksets","forEach","thisWorkset","i","arr","prevWorkset","push","areTheseThingsEqual","length","things","unorderedThings","map","thing","thingDiffs","areThingsEqual","every","thingDiff","Object","keys","constructor","SingleWorksetLabelWithExercise","workset","exercise","reps","intensity","intensityUnit","name","MultipleWorksetsWithoutExerciseLabel","worksetCount","MultipleWorksetsWithExerciseLabel","SingleRoundSingleModeWorkgroupLabel","round","worksetsAreEqual","exerciseName","worksetGroup","MultipleRoundsSingleModeWorkgroupLabel","workgroup","rounds","roundCount","isMultiModal","ws","filter","v","a","indexOf","MultipleRoundsMultiModeWorkgroupLabel","roundIndex","intervalSymbol","RxWorkgroupLabel","note","roundsCount","roundsAreEqual","ordinalSymbol"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ordinals } from \"../data\";\nimport { diff } from \"deep-object-diff\";\n\nconst getIntervalSymbol = (interval, intervalType) => {\n  switch (intervalType) {\n    case \"inclusive\":\n      return ` //${interval}`;\n    case \"exclusive\":\n      return ` /${interval}`;\n    case \"none\":\n      return \"\";\n    default:\n      return `${interval}`;\n  }\n};\n\nconst getOrdinalSymbol = sortOrder => {\n  return ordinals[sortOrder] + \".\";\n};\n\nconst groupWorksets = worksets => {\n  let groupedWorksets = [];\n  worksets.forEach((thisWorkset, i, arr) => {\n    const prevWorkset = arr[i - 1];\n    if (i === 0) {\n      groupedWorksets.push([thisWorkset]);\n    } else if (areTheseThingsEqual([thisWorkset, prevWorkset])) {\n      groupedWorksets[groupedWorksets.length - 1].push(thisWorkset);\n    } else {\n      groupedWorksets.push([thisWorkset]);\n    }\n  });\n  return groupedWorksets;\n};\n\nconst areTheseThingsEqual = things => {\n  const unorderedThings = things.map(thing => ({ ...thing, sortOrder: 0 }));\n  const thingDiffs = unorderedThings.map((thing, i, arr) =>\n    diff(arr[0], thing)\n  );\n  const areThingsEqual = thingDiffs.every(\n    thingDiff =>\n      Object.keys(thingDiff).length === 0 && thingDiff.constructor === Object\n  );\n  return areThingsEqual;\n};\n\n//#region Workset Components\n\nconst SingleWorksetLabelWithExercise = ({ workset }) => {\n  const {\n    exercise,\n    reps,\n    intensity,\n    intensityUnit,\n    interval,\n    intervalType\n  } = workset;\n  return (\n    <div>\n      {exercise.name}, 1x{reps} @ {intensity + intensityUnit}{\" \"}\n      {getIntervalSymbol(interval, intervalType)}\n    </div>\n  );\n};\n\nconst MultipleWorksetsWithoutExerciseLabel = ({ worksets }) => {\n  const worksetCount = worksets.length;\n  const workset = worksets[0];\n  return (\n    <div>\n      {worksetCount}x{workset.reps} @{\" \"}\n      {workset.intensity + workset.intensityUnit}{\" \"}\n      {getIntervalSymbol(workset.interval, workset.intervalType)}\n    </div>\n  );\n};\n\nconst MultipleWorksetsWithExerciseLabel = ({ worksets }) => {\n  const worksetCount = worksets.length;\n  const workset = worksets[0];\n  return (\n    <div>\n      {workset.exercise.name}, {worksetCount}x{workset.reps} @{\" \"}\n      {workset.intensity + workset.intensityUnit}{\" \"}\n      {getIntervalSymbol(workset.interval, workset.intervalType)}\n    </div>\n  );\n};\n//#endregion\n\n//region Round Components\nconst SingleRoundSingleModeWorkgroupLabel = ({ round }) => {\n  const worksets = round.worksets;\n  const worksetsAreEqual = areTheseThingsEqual(worksets);\n  if (worksetsAreEqual) {\n    return <MultipleWorksetsWithExerciseLabel worksets={worksets} />;\n  } else {\n    const exerciseName = worksets[0].exercise.name;\n    const groupedWorksets = groupWorksets(worksets);\n    return (\n      <div>\n        {exerciseName + \", \"}\n        {groupedWorksets.map(worksetGroup => {\n          return (\n            <MultipleWorksetsWithoutExerciseLabel worksets={worksetGroup} />\n          );\n        })}\n      </div>\n    );\n  }\n};\n\nconst MultipleRoundsSingleModeWorkgroupLabel = ({ workgroup }) => {\n  const { rounds } = workgroup;\n  const roundCount = rounds.length;\n  const round = rounds[0];\n  const worksets = round.worksets;\n  const { exercise } = worksets[0];\n  const groupedWorksets = groupWorksets(worksets);\n  const isMultiModal =\n    worksets.map(ws => ws.exercise.name).filter((v, i, a) => a.indexOf(v) === i)\n      .length !== 1;\n\n  return (\n    <div>\n      {!isMultiModal ? exercise.name + \", \" : null}\n      {roundCount + \" rounds\"}\n      {groupedWorksets.map(worksetGroup =>\n        isMultiModal ? (\n          <MultipleWorksetsWithExerciseLabel worksets={worksetGroup} />\n        ) : (\n          <MultipleWorksetsWithoutExerciseLabel worksets={worksetGroup} />\n        )\n      )}\n    </div>\n  );\n};\n\nconst MultipleRoundsMultiModeWorkgroupLabel = ({ workgroup }) => {\n  const { rounds } = workgroup;\n  return (\n    <div>\n      {rounds.map((round, roundIndex) => {\n        const groupedWorksets = groupWorksets(round.worksets);\n        const intervalSymbol = getIntervalSymbol(\n          round.interval,\n          round.intervalType\n        );\n        return (\n          <div>\n            {`Round ${roundIndex + 1}`}\n            {intervalSymbol}\n            {groupedWorksets.map(worksetGroup =>\n              worksetGroup.length === 1 ? (\n                <SingleWorksetLabelWithExercise workset={worksetGroup[0]} />\n              ) : (\n                <MultipleWorksetsWithExerciseLabel worksets={worksetGroup} />\n              )\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n//#endregion\n\nexport const RxWorkgroupLabel = ({ workgroup }) => {\n  const { rounds, note } = workgroup;\n  const roundsCount = rounds.length;\n  const roundsAreEqual = areTheseThingsEqual(rounds);\n  const ordinalSymbol = getOrdinalSymbol(workgroup.sortOrder);\n  return (\n    <div className=\"mb-2\">\n      {note ? <div className=\"text-sm mt-1\">{note}</div> : null}\n      <div className=\"flex\">\n        <div className=\"mr-1\">{ordinalSymbol}</div>\n        {roundsCount === 1 ? (\n          <SingleRoundSingleModeWorkgroupLabel round={rounds[0]} />\n        ) : roundsAreEqual ? (\n          <MultipleRoundsSingleModeWorkgroupLabel workgroup={workgroup} />\n        ) : (\n          <MultipleRoundsMultiModeWorkgroupLabel workgroup={workgroup} />\n        )}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}